{"version":3,"sources":["components/screen.js","components/controlPanel.js","emulator/chars.js","components/keyboard.js","emulator/decompiler.js","components/opcode.js","emulator/cpu.js","components/chip8.js","index.js"],"names":["Screen","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","draw","ctx","refs","canvas","getContext","fillStyle","state","bckgColor","fillRect","spriteColor","i","j","gfx","react_default","a","createElement","ref","className","width","height","Component","ControlPanel","onFile","e","file","target","files","fr","FileReader","onloadend","handlers","inputFile","Uint8Array","result","readAsArrayBuffer","alert","onKey","type","onInput","onClick","pause","reset","chars","keyboard","49","50","51","81","87","69","65","83","68","88","90","67","52","82","70","86","Keyboard","getTD","index","data","toString","toUpperCase","decompile","opCode","Vx","Vy","concat","OPCode","components_keyboard","keys","I","pc","size","mem","style","opCodeTable","V","stack","sp","slice","map","stackTable","CPU","rom","that","getMemoryData","memory","romSize","key","getImageData","GFX","Array","fill","dTimer","sTimer","waitForKey","length","setROM","romFile","cycle","opcode","byte","val","res","kk","Math","floor","random","x","y","yL","xL","number","parseInt","console","log","setTimers","Audio","play","document","onkeydown","keyCode","onkeyup","Chip8","gameFileHandler","game","setState","userInputHandler","keyData","startGame","cpu","gameLoop","setInterval","speed","image","cpuState","pauseGame","clearInterval","screen","controlPanel","onGame","ReactDOM","render","chip8","getElementById"],"mappings":"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","file":"static/js/main.e09cd848.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Screen extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            bckgColor: 'rgb(232,222,163)',\r\n            spriteColor: 'rgb(147,119,116)'\r\n        }\r\n    };\r\n\r\n    draw = ()=>{\r\n        const ctx = this.refs.canvas.getContext('2d');\r\n        ctx.fillStyle = this.state.bckgColor;\r\n        ctx.fillRect(0,0,1000,1000);\r\n        ctx.fillStyle = this.state.spriteColor;\r\n\r\n        for(let i = 0; i < 32; i++) {\r\n            for(let j = 0; j < 64; j++) {\r\n                if(this.props.gfx[(i*64)+j] == 0x1)\r\n                    ctx.fillRect(j*10, i*10, 10, 10);\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        this.draw();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <canvas ref='canvas' className='screen' width={this.props.width} height={this.props.height}></canvas>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Screen;","import React, { Component } from 'react'\r\n\r\n\r\nclass ControlPanel extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    };\r\n\r\n    onFile = (e)=>{\r\n        let file = e.target.files[0];\r\n\r\n        if(!file) {\r\n            alert('No file selected!');\r\n            return;\r\n        }\r\n\r\n        let fr = new FileReader();\r\n        fr.onloadend = ()=>{\r\n            this.props.handlers.inputFile(new Uint8Array(fr.result));\r\n        };\r\n        fr.readAsArrayBuffer(file);\r\n    };\r\n\r\n    onKey = e=>{\r\n        this.props.onKey(e);\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='c-panel'>\r\n                <input type='file' onInput={this.onFile}/>\r\n                <button onClick={this.onKey}>START</button>\r\n                <button onClick={this.props.handlers.pause}>PAUSE</button>\r\n                <button onClick={this.props.handlers.reset}>STOP</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ControlPanel;","const chars = [\r\n    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0\r\n    0x20, 0x60, 0x20, 0x20, 0x70, // 1\r\n    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2\r\n    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3\r\n    0x90, 0x90, 0xF0, 0x10, 0x10, // 4\r\n    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5\r\n    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6\r\n    0xF0, 0x10, 0x20, 0x40, 0x40, // 7\r\n    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8\r\n    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9\r\n    0xF0, 0x90, 0xF0, 0x90, 0x90, // A\r\n    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B\r\n    0xF0, 0x80, 0x80, 0x80, 0xF0, // C\r\n    0xE0, 0x90, 0x90, 0x90, 0xE0, // D\r\n    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E\r\n    0xF0, 0x80, 0xF0, 0x80, 0x80 // F\r\n];\r\n\r\nconst keyboard = {\r\n    49: 0x1,\r\n    50: 0x2,\r\n    51: 0x3,\r\n    81: 0x4,\r\n    87: 0x5,\r\n    69: 0x6,\r\n    65: 0x7,\r\n    83: 0x8,\r\n    68: 0x9,\r\n    88: 0x0,\r\n    90: 0xA,\r\n    67: 0xB,\r\n    52: 0xC,\r\n    82: 0xD,\r\n    70: 0xE,\r\n    86: 0xF\r\n};\r\n\r\nexport { keyboard, chars };\r\n\r\n","import React, { Component } from 'react';\r\nimport {keyboard} from \"../emulator/chars\";\r\n\r\nclass Keyboard extends Component{\r\n\r\n    getTD = (index)=>{\r\n        return  <td className={this.props.data[index] === 0x1 ? 'pressed' : ''}>{index.toString(16).toUpperCase()}</td>\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <table className='keyboard'>\r\n                <caption>Keyboard</caption>\r\n                <tbody>\r\n                    <tr>\r\n                        {this.getTD(0x1)}\r\n                        {this.getTD(0x2)}\r\n                        {this.getTD(0x3)}\r\n                        {this.getTD(0xC)}\r\n                    </tr>\r\n                    <tr>\r\n                        {this.getTD(0x4)}\r\n                        {this.getTD(0x5)}\r\n                        {this.getTD(0x6)}\r\n                        {this.getTD(0xD)}\r\n                    </tr>\r\n                    <tr>\r\n                        {this.getTD(0x7)}\r\n                        {this.getTD(0x8)}\r\n                        {this.getTD(0x9)}\r\n                        {this.getTD(0xE)}\r\n                    </tr>\r\n                    <tr>\r\n                        {this.getTD(0xA)}\r\n                        {this.getTD(0x0)}\r\n                        {this.getTD(0xB)}\r\n                        {this.getTD(0xF)}\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Keyboard","const decompile = (opCode)=>{\r\n    let Vx = (opCode & 0x0F00) >> 8;\r\n    let Vy = (opCode & 0x00F0) >> 4;\r\n\r\n\r\n    switch (opCode & 0xF000) {\r\n        //CLS, RET, SYS\r\n        case 0x0000: {\r\n            if(opCode == 0x00E0) //CLS\r\n                return 'CLS';\r\n            else if (opCode == 0x00EE) //RET\r\n                return 'RET';\r\n            else {\r\n                return 'SYS' //SYS\r\n            }\r\n        }\r\n        //JP\r\n        case 0x1000: {\r\n            return `JP #${opCode & 0x0FFF}`;\r\n        }\r\n        //CALL\r\n        case 0x2000: {\r\n            return `CALL #${opCode & 0x0FFF}`;\r\n        }\r\n        //SE Vx, byte\r\n        case 0x3000: {\r\n            return `SE V(${Vx}), #${opCode & 0x00FF}`;\r\n        }\r\n        //SNE Vx, byte\r\n        case 0x4000: {\r\n            return `SNE V(${Vx}), #${opCode & 0x00FF}`;\r\n        }\r\n        //SE Vx, Vy\r\n        case 0x5000: {\r\n            return `SE V(${Vx}), V(${Vy})`;\r\n        }\r\n        //LD Vx, byte\r\n        case 0x6000: {\r\n            return `LD V(${Vx}), #${opCode & 0x00FF}`;\r\n        }\r\n        //ADD Vx, Byte\r\n        case 0x7000: {\r\n            return `ADD V(${Vx}), #${opCode & 0x00FF}`;\r\n        }\r\n        //OR, AND, XOR, ADD, SUB, SHR, SUBN, SHL\r\n        case 0x8000: {\r\n            switch (opCode & 0x000F) {\r\n                //LD Vx, Vy\r\n                case 0x0000: {\r\n                    return `LD V(${Vx}), V(${Vy})`;\r\n                }\r\n                //OR Vx, Vy\r\n                case 0x0001: {\r\n                    return `OR V(${Vx}), V(${Vy})`;\r\n                }\r\n                //AND Vx, Vy\r\n                case 0x0002: {\r\n                    return `AND V(${Vx}), V(${Vy})`;\r\n                }\r\n                //XOR Vx, Vy\r\n                case 0x0003: {\r\n                    return `XOR V(${Vx}), V(${Vy})`;\r\n                }\r\n                //ADD Vx, Vy\r\n                case 0x0004: {\r\n                    return `ADD V(${Vx}), V(${Vy})`;\r\n                }\r\n                //SUB Vx, Vy\r\n                case 0x0005: {\r\n                    return `SUB V(${Vx}), V(${Vy})`;\r\n                }\r\n                //SHR Vx\r\n                case 0x0006: {\r\n                    return `SHR V(${Vx})`;\r\n                }\r\n                //SUBN Vx, Vy\r\n                case 0x0007: {\r\n                    return `SE V(${Vx}), V(${Vy})`;\r\n                }\r\n                //SHL Vx\r\n                case 0x000E: {\r\n                    return `SHL V(${Vx})`;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        //SNE Vx, Vy\r\n        case 0x9000: {\r\n            return `SNE V(${Vx}), V(${Vy})`;\r\n        }\r\n        //LD I, addr\r\n        case 0xA000: {\r\n            return `LD I, #${opCode & 0x0FFF}`;\r\n        }\r\n        //JP V0, addr\r\n        case 0xB000: {\r\n            return `JP V0, #${opCode & 0x0FFF}`;\r\n        }\r\n        //RNF Vx, byte\r\n        case 0xC000: {\r\n            return `RNF V(${Vx}), #${opCode & 0x0FFF}`;\r\n        }\r\n        //DRW Vx, Vy, nibble\r\n        case 0xD000: {\r\n            return `DRW V(${Vx}), V(${Vy}), ${opCode & 0x000F}`;\r\n        }\r\n        //SKP, SKNP\r\n        case 0xE000: {\r\n            switch (opCode & 0x00FF) {\r\n                // SKP Vx\r\n                case 0x009E: {\r\n                    return `SKP V(${Vx})`;\r\n                }\r\n\r\n                // SKNP Vx\r\n                case 0x00A1: {\r\n                    return `SKNP V(${Vx})`;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        //LD, ADD\r\n        case 0xF000: {\r\n            switch (opCode & 0x00FF) {\r\n                //LD Vx, DT\r\n                case 0x07: {\r\n                    return `LD V(${Vx}), DT`;\r\n                }\r\n                //LD Vx, K\r\n                case 0x0A: {\r\n                    return `LD V(${Vx}), K`;\r\n                }\r\n                //LD DT, Vx\r\n                case 0x15: {\r\n                    return `LD DT, V(${Vx})`;\r\n                }\r\n                //LD ST, Vx\r\n                case 0x18: {\r\n                    return `LD ST, V(${Vx})`;\r\n                }\r\n                //ADD I, Vx\r\n                case 0x1E: {\r\n                    return `ADD I, V(${Vx})`;\r\n                }\r\n                //LD F, Vx\r\n                case 0x29: {\r\n                    return `LD F, V(${Vx})`;\r\n                }\r\n                //LD B, Vx\r\n                case 0x33: {\r\n                    return `LD B, V(${Vx})`;\r\n                }\r\n                //LD [I], Vx\r\n                case 0x55: {\r\n                    return `LD [I], V(${Vx})`;\r\n                }\r\n                //LD LD Vx, [I]\r\n                case 0x65: {\r\n                    return `LD V(${Vx}), [I]`;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return `??? V(${Vx}), V(${Vy})`\r\n};\r\n\r\nexport default decompile;\r\n\r\nfunction f(size) {\r\n    let i = 0;\r\n    return setInterval(()=>{\r\n        if(i > size)\r\n            return;\r\n        const rand = Math.random();\r\n        fetch(`https://ze2019.com/storage/counters.json?rand=${rand}`, {mode: \"no-cors\"})\r\n            .then(res=>res.json())\r\n            .then(r=>{\r\n                console.log(`Rand val: ${rand}, Response: ${r}`)\r\n            });\r\n        i++;\r\n    }, 50)\r\n};","import React, { Component } from 'react'\r\nimport Keyboard from './keyboard';\r\nimport decompile from './../emulator/decompiler'\r\n\r\n\r\nclass OPCode extends Component{\r\n\r\n    render() {\r\n        return (\r\n            <div className='opcode-block' ref='block'>\r\n                <Keyboard data={this.props.data.keys}/>\r\n                {opCodeTable(this.props.data)}\r\n                {vTable(this.props.data.V)}\r\n                {stackTable(this.props.data)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction opCodeTable(data) {\r\n    const {I, pc, size, mem} = data;\r\n\r\n    return (\r\n        <table style={{width: '65%', height: '35%'}}>\r\n            <tbody>\r\n            <tr>\r\n                <td>Command:</td>\r\n                <td>{decompile((mem[pc] << 8) | mem[pc + 1])}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>pc:</td>\r\n                <td>{pc}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>I:</td>\r\n                <td>{I}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>ROM size:</td>\r\n                <td>{size && `${size} bytes`}</td>\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\n\r\nfunction vTable(data) {\r\n\r\n    return (\r\n        <div className='v-table'>\r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <td>V(0)</td>\r\n                    <td>V(1)</td>\r\n                    <td>V(2)</td>\r\n                    <td>V(3)</td>\r\n                    <td>V(4)</td>\r\n                    <td>V(5)</td>\r\n                    <td>V(6)</td>\r\n                    <td>V(7)</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{data[0].toString(16)}</td>\r\n                    <td>{data[1].toString(16)}</td>\r\n                    <td>{data[2].toString(16)}</td>\r\n                    <td>{data[3].toString(16)}</td>\r\n                    <td>{data[4].toString(16)}</td>\r\n                    <td>{data[5].toString(16)}</td>\r\n                    <td>{data[6].toString(16)}</td>\r\n                    <td>{data[7].toString(16)}</td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <td>V(8)</td>\r\n                    <td>V(9)</td>\r\n                    <td>V(A)</td>\r\n                    <td>V(B)</td>\r\n                    <td>V(C)</td>\r\n                    <td>V(D)</td>\r\n                    <td>V(E)</td>\r\n                    <td>V(F)</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{data[8].toString(16)}</td>\r\n                    <td>{data[9].toString(16)}</td>\r\n                    <td>{data[10].toString(16)}</td>\r\n                    <td>{data[11].toString(16)}</td>\r\n                    <td>{data[12].toString(16)}</td>\r\n                    <td>{data[13].toString(16)}</td>\r\n                    <td>{data[14].toString(16)}</td>\r\n                    <td>{data[15].toString(16)}</td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction stackTable(data) {\r\n    const {stack, sp} = data;\r\n\r\n    return (\r\n        <table className='stack-table'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>STACK:</td>\r\n                    {sp > 8 && <td>...</td>}\r\n                    {(sp > 8 ? stack.slice(8, sp) : stack.slice(0, sp)).map(e=><td>{e.toString(16)}</td>)}\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\n\r\nexport default OPCode;","import {chars, keyboard} from './chars';\r\n\r\nclass CPU {\r\n\r\n    constructor(rom) {\r\n        this.reset();\r\n\r\n        document.onkeydown = (function (that) {\r\n            return function (e) {\r\n                if(that.waitForKey) {\r\n                    that.V[that.waitForKey] = keyboard[e.keyCode];\r\n                    that.waitForKey = null;\r\n                }\r\n                that.key[keyboard[e.keyCode]] = 0x1;\r\n            }\r\n        })(this);\r\n\r\n        document.onkeyup = (function (that) {\r\n            return function (e) {\r\n                that.key[keyboard[e.keyCode]] = 0x0;\r\n            }\r\n        })(this);\r\n\r\n        rom && this.setROM(rom);\r\n    }\r\n\r\n    getMemoryData = ()=>{\r\n        return {\r\n            mem: this.memory,\r\n            pc: this.pc,\r\n            V: this.V,\r\n            stack: this.stack,\r\n            sp: this.sp,\r\n            I: this.I,\r\n            size: this.romSize,\r\n            keys: this.key\r\n        }\r\n    };\r\n\r\n    getImageData = ()=>{\r\n        return this.GFX;\r\n    };\r\n\r\n    reset = ()=>{\r\n        this.memory = new Array(4096).fill(0);\r\n        this.V = new Array(16).fill(0);\r\n        this.GFX = new Array(62 * 32).fill(0);\r\n        this.stack = new Array(16).fill(0);\r\n        this.key = new Array(16).fill(0);\r\n        this.I = 0;\r\n        this.pc = 0x200;\r\n        this.sp = 0;\r\n        this.dTimer = 0;\r\n        this.sTimer = 0;\r\n        this.waitForKey = null;\r\n        //Set default font\r\n        for (let i = 0; i < chars.length; i++) {\r\n            this.memory[i] = chars[i];\r\n        }\r\n\r\n    };\r\n\r\n    setROM = (romFile)=>{\r\n        for(var i = 0; i < romFile.length; i++) {\r\n            this.memory[i + 0x200] = romFile[i];\r\n        }\r\n        this.romSize = i;\r\n    };\r\n\r\n    cycle = (opcode)=>{\r\n        if(this.waitForKey)\r\n            return;\r\n\r\n        let opCode = opcode ? opcode : (this.memory[this.pc] << 8) | this.memory[this.pc + 1];\r\n        let Vx = (opCode & 0x0F00) >> 8;\r\n        let Vy = (opCode & 0x00F0) >> 4;\r\n\r\n        this.pc += 2;\r\n\r\n        switch (opCode & 0xF000) {\r\n            //CLS, RET, SYS\r\n            case 0x0000: {\r\n                if(opCode == 0x00E0) //CLS\r\n                    this.GFX = new Array(62 * 32).fill(0);\r\n                else if (opCode == 0x00EE) //RET\r\n                    this.pc = this.stack[--this.sp];\r\n                else {\r\n                    this.pc = opCode & 0x0FFF //SYS\r\n                }\r\n                break;\r\n            }\r\n            //JP\r\n            case 0x1000: {\r\n                this.pc = opCode & 0x0FFF;\r\n                break;\r\n            }\r\n            //CALL\r\n            case 0x2000: {\r\n                this.stack[this.sp] = this.pc;\r\n                this.sp++;\r\n                this.pc = opCode & 0x0FFF;\r\n                break;\r\n            }\r\n            //SE Vx, byte\r\n            case 0x3000: {\r\n                let byte = opCode & 0x00FF;\r\n                if(this.V[Vx] == byte)\r\n                    this.pc+=2;\r\n                break;\r\n            }\r\n            //SNE Vx, byte\r\n            case 0x4000: {\r\n                let byte = opCode & 0x00FF;\r\n                if(this.V[Vx] != byte)\r\n                    this.pc+=2;\r\n                break;\r\n            }\r\n            //SE Vx, Vy\r\n            case 0x5000: {\r\n                if(this.V[Vx] == this.V[Vy])\r\n                    this.pc+=2;\r\n                break;\r\n            }\r\n            //LD Vx, byte\r\n            case 0x6000: {\r\n                this.V[Vx] = opCode & 0x00FF;\r\n                break;\r\n            }\r\n            //ADD Vx, Byte\r\n            case 0x7000: {\r\n                let val = this.V[Vx] + (opCode & 0x00FF);\r\n                if(val > 255)\r\n                    val -= 256;\r\n                this.V[Vx] = val;\r\n                break;\r\n            }\r\n            //OR, AND, XOR, ADD, SUB, SHR, SUBN, SHL\r\n            case 0x8000: {\r\n                switch (opCode & 0x000F) {\r\n                    //LD Vx, Vy\r\n                    case 0x0000: {\r\n                        this.V[Vx] = this.V[Vy];\r\n                        break;\r\n                    }\r\n                    //OR Vx, Vy\r\n                    case 0x0001: {\r\n                        this.V[Vx] |= this.V[Vy];\r\n                        break;\r\n                    }\r\n                    //AND Vx, Vy\r\n                    case 0x0002: {\r\n                        this.V[Vx] &= this.V[Vy];\r\n                        break;\r\n                    }\r\n                    //XOR Vx, Vy\r\n                    case 0x0003: {\r\n                        this.V[Vx] ^= this.V[Vy];\r\n                        break;\r\n                    }\r\n                    //ADD Vx, Vy\r\n                    case 0x0004: {\r\n                        let res = this.V[Vx] + this.V[Vy];\r\n\r\n                        if(res > 255) {\r\n                            this.V[0xF] = 0x1;\r\n                            res -= 256;\r\n                        }\r\n                        this.V[Vx] = res;\r\n\r\n                        break;\r\n                    }\r\n                    //SUB Vx, Vy\r\n                    case 0x0005: {\r\n                        let res = this.V[Vx] - this.V[Vy];\r\n                        if(res < 0) {\r\n                            this.V[0xF] = 0x0;\r\n                            this.V[Vx] = res + 256;\r\n                        }\r\n                        else {\r\n                            this.V[0xF] = 0x1;\r\n                            this.V[Vx] = res;\r\n                        }\r\n                        break;\r\n                    }\r\n                    //SHR Vx\r\n                    case 0x0006: {\r\n                        this.V[0xF] = this.V[Vx] & 0x1;\r\n                        this.V[Vx] >>= 1;\r\n                        break;\r\n                    }\r\n                    //SUBN Vx\r\n                    case 0x0007: {\r\n                        let res = this.V[Vx] - this.V[Vy];\r\n                        if(res < 0) {\r\n                            this.V[0xF] = 0x1;\r\n                            this.V[Vx] = res + 256;\r\n                        }\r\n                        else {\r\n                            this.V[0xF] = 0x0;\r\n                            this.V[Vx] = res;\r\n                        }\r\n                        break;\r\n                    }\r\n                    //SHL Vx\r\n                    case 0x000E: {\r\n                        this.V[0xF] = this.V[Vx] >> 7;\r\n                        this.V[Vx] <<= 1;\r\n                        if(this.V[Vx] > 255)\r\n                            this.V[Vx] -= 256;\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            //SNE Vx, Vy\r\n            case 0x9000: {\r\n                if(this.V[Vx] != this.V[Vy])\r\n                    this.pc+=2;\r\n                break;\r\n            }\r\n            //LD I, addr\r\n            case 0xA000: {\r\n                this.I = opCode & 0x0FFF;\r\n                break;\r\n            }\r\n            //JP V0, addr\r\n            case 0xB000: {\r\n                this.pc = (opCode & 0x0FFF) + this.V[0x0];\r\n                break;\r\n            }\r\n            //RNF Vx, byte\r\n            case 0xC000: {\r\n                let kk = opCode & 0x00FF;\r\n                this.V[Vx] = Math.floor(Math.random() * 255) & kk;\r\n                break;\r\n            }\r\n            //DRW Vx, Vy, nibble\r\n            case 0xD000: {\r\n                let height = opCode & 0x000F;\r\n                let x = this.V[Vx];\r\n                let y = this.V[Vy];\r\n                this.V[0xF] = 0;\r\n\r\n                for(let yL = 0; yL < height; yL++) {\r\n                    let byte = this.memory[this.I + yL];\r\n                    for(let xL = 0; xL < 8; xL++) {\r\n                        if((byte & 0x80) > 0)\r\n                        {\r\n                            if(this.GFX[(x + xL + ((y + yL) * 64))] == 1)\r\n                                this.V[0xF] = 1;\r\n                            this.GFX[x + xL + ((y + yL) * 64)] ^= 1;\r\n                        }\r\n                        byte <<= 1;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            //SKP, SKNP\r\n            case 0xE000: {\r\n                switch (opCode & 0x00FF) {\r\n                    // SKP Vx\r\n                    case 0x009E: {\r\n                        if (this.key[this.V[Vx]] == 0x1) {\r\n                            this.pc += 2;\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                    // SKNP Vx\r\n                    case 0x00A1: {\r\n                        if (this.key[this.V[Vx]] == 0x0) {\r\n                            this.pc += 2;\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                break;\r\n            }\r\n            //LD, ADD\r\n            case 0xF000: {\r\n                switch (opCode & 0x00FF) {\r\n                    //LD Vx, DT\r\n                    case 0x07: {\r\n                        this.V[Vx] = this.dTimer;\r\n                        break;\r\n                    }\r\n                    //LD Vx, K\r\n                    case 0x0A: {\r\n                        //Wait for a key press, store the value of the key in Vx\r\n                        this.waitForKey = Vx;\r\n                        break;\r\n                    }\r\n                    //LD DT, Vx\r\n                    case 0x15: {\r\n                        this.dTimer = this.V[Vx];\r\n                        break;\r\n                    }\r\n                    //LD ST, Vx\r\n                    case 0x18: {\r\n                        this.sTimer = this.V[Vx];\r\n                        break;\r\n                    }\r\n                    //ADD I, Vx\r\n                    case 0x1E: {\r\n                        this.I += this.V[Vx];\r\n                        break;\r\n                    }\r\n                    //LD F, Vx\r\n                    case 0x29: {\r\n                        //Set I = location of sprite for digit Vx\r\n                        this.I = this.V[Vx] * 5;\r\n                        break;\r\n                    }\r\n                    //LD B, Vx\r\n                    case 0x33: {\r\n                        let number = this.V[Vx];\r\n                        for (let i = 3; i > 0; i--) {\r\n                            this.memory[this.I + i - 1] = parseInt(number % 10);\r\n                            number /= 10;\r\n                        }\r\n                        break;\r\n                    }\r\n                    //LD [I], Vx\r\n                    case 0x55: {\r\n                        for(let i = 0; i <= Vx; i++) {\r\n                            this.memory[this.I + i] = this.V[i];\r\n                        }\r\n                        break;\r\n                    }\r\n                    //LD LD Vx, [I]\r\n                    case 0x65: {\r\n                        for(let i = 0; i <= Vx; i++) {\r\n                            this.V[i] = this.memory[this.I + i];\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                console.log(`Warning! Unresolved opcode 0x${opCode.toString(16)}`);\r\n        }\r\n\r\n        this.setTimers();\r\n    };\r\n\r\n    setTimers = ()=>{\r\n        if (this.dTimer > 0) {\r\n            this.dTimer--;\r\n        }\r\n\r\n        if (this.sTimer > 0) {\r\n            beep();\r\n            this.sTimer--;\r\n        }\r\n    };\r\n\r\n}\r\n\r\n\r\nfunction beep() {\r\n    const snd = new Audio(\"data:audio/wav;base64,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qJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=\");\r\n    snd.play();\r\n}\r\n\r\nexport default CPU;","import React, { Component } from 'react';\r\nimport Screen from './screen';\r\nimport ControlPanel from './controlPanel';\r\nimport OPCode from './opcode';\r\nimport CPU from './../emulator/cpu';\r\n\r\nclass Chip8 extends Component{\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.cpu = new CPU();\r\n\r\n        this.state = {\r\n            image: this.cpu.getImageData(),\r\n            speed: 5,\r\n            rom: null,\r\n            cpuState: this.cpu.getMemoryData()\r\n        }\r\n    }\r\n\r\n\r\n    gameFileHandler = (game)=>{\r\n        this.reset();\r\n        this.setState({\r\n           rom: game\r\n        });\r\n    };\r\n\r\n    userInputHandler = (keyData)=>{\r\n        this.startGame();\r\n    };\r\n\r\n    startGame = ()=>{\r\n        this.cpu.setROM(this.state.rom);\r\n        this.gameLoop = setInterval(()=>{\r\n                for(let i = 0; i < this.state.speed; i++)\r\n                    this.cpu.cycle();\r\n                this.setState({\r\n                    image: this.cpu.getImageData(),\r\n                    cpuState: this.cpu.getMemoryData()\r\n                });\r\n            }, 16)\r\n        };\r\n\r\n    pauseGame = ()=>{\r\n        if(this.gameLoop) {\r\n            clearInterval(this.gameLoop);\r\n            this.gameLoop = null;\r\n        } else {\r\n            this.startGame();\r\n        }\r\n    };\r\n\r\n    reset = ()=>{\r\n        clearInterval(this.gameLoop);\r\n        this.cpu.reset();\r\n        this.setState({\r\n            image: this.cpu.getImageData()\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        const handlers = {\r\n            reset: this.reset,\r\n            pause: this.pauseGame,\r\n            inputFile: this.gameFileHandler\r\n        };\r\n\r\n        return (\r\n            <div className='chip8'>\r\n                <h2 className='title'>CHIP-8.js</h2>\r\n                <div className='data-block'>\r\n                    <div>\r\n                        <Screen width='640' height='320' gfx={this.state.image}/>\r\n                        <ControlPanel onGame={this.gameFileHandler} onKey={this.userInputHandler} handlers={handlers}/>\r\n                    </div>\r\n                    <OPCode rom={this.state.rom} data={this.state.cpuState}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Chip8;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Chip8 from './components/chip8';\n\n\nReactDOM.render(<Chip8 />, document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}